package sample.hyperledger.blockchain.communication;

import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;

import javax.ejb.EJB;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hyperledger.fabric.gateway.Gateway;
import org.hyperledger.fabric.gateway.Network;
import org.hyperledger.fabric.gateway.Wallet;
import org.hyperledger.fabric.protos.common.Common.Envelope;
import org.hyperledger.fabric.protos.common.Common.Payload;
import org.hyperledger.fabric.protos.ledger.rwset.Rwset;
import org.hyperledger.fabric.protos.ledger.rwset.kvrwset.KvRwset;
import org.hyperledger.fabric.protos.peer.FabricProposal;
import org.hyperledger.fabric.protos.peer.FabricProposalResponse;
import org.hyperledger.fabric.protos.peer.FabricTransaction;
import org.hyperledger.fabric.protos.peer.FabricTransaction.ProcessedTransaction;
import org.hyperledger.fabric.sdk.Channel;
import org.hyperledger.fabric.sdk.TransactionInfo;
import org.hyperledger.fabric.sdk.TxReadWriteSetInfo;

import com.google.protobuf.InvalidProtocolBufferException;

@WebServlet(urlPatterns="/servlet")
public class EventNotificationServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	
	 static String pathRoot = "/Users/Shared/FabConnection/";
	
	 @EJB
	 private EventListener el;
	 
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
        throws ServletException, IOException {
        response.getWriter().append(getHTMLResponseString());
    }

    protected void doPost(HttpServletRequest request, HttpServletResponse response)
        throws ServletException, IOException {
        doGet(request, response);
    }
    
    private String getHTMLResponseString()
    {	
    	Resources res = new Resources();
    	
    	String lastEvent = el.getLastTransactionId(); 
    	
    	StringBuilder sb = new StringBuilder("<!DOCTYPE html>");
    	
    	sb.append("<html>");
    	sb.append("<body>");
    	sb.append("<h2>Notification of new cars on the Ledger</h2>");
    	sb.append("<p>This screen is refreshed every 2 seconds</p>");
    	sb.append("<p>Last event is Transaction Id:" + lastEvent + " </p>");
    	sb.append("<p>Transaction Detail:" + GetLastTransactionIdResult() + " </p>");
    	sb.append("<script>");
    	sb.append("window.onload = function() {");
    	sb.append("setTimeout(function () {");
    	sb.append("location.reload()");
    	sb.append(" }, 20000);};");
    	sb.append("</script> ");
    	sb.append("</body>");
    	sb.append("</html>");
    	
    	return sb.toString();
    }
    
    private String GetLastTransactionIdResult() {
		String passedOutput = "";
		String lastEvent = el.getLastTransactionId(); 
		try {
			Path walletPath = Paths.get(pathRoot + "org-2-wallet");
			Wallet wallet = Wallet.createFileSystemWallet(walletPath);
			
			//load a CCP
			//expecting the connect profile json file; export the Connection Profile from the
			//fabric gateway and add to the default server location 
			Path networkConfigPath = Paths.get(pathRoot + "2-Org-Local-Fabric-Org1_connection.json");
			Gateway.Builder builder = Gateway.createBuilder();
			
			//expecting wallet directory within the default server location
			//wallet exported from Fabric wallets Org 1
			builder.identity(wallet, "org2Admin").networkConfig(networkConfigPath).discovery(true);
			
			try (Gateway gateway = builder.connect()) {
				
				// get the network and contract
				Network network = gateway.getNetwork("mychannel");
			    Channel ch = network.getChannel();
			    TransactionInfo ti = ch.queryTransactionByID(lastEvent);
			    System.out.println("TransactionInfo : "+ ti.toString());
			    
			    ProcessedTransaction pt = ti.getProcessedTransaction();
			    Envelope ev = pt.getTransactionEnvelope();
			    System.out.println("Envelope created - next get payload");
			    
			    
			    try {
			        Payload payload = Payload.parseFrom(ev.getPayload());
			        FabricTransaction.Transaction transaction = FabricTransaction.Transaction.parseFrom(payload.getData());
				    FabricTransaction.TransactionAction action = transaction.getActionsList().get(0); // 0 is a index
				    FabricTransaction.ChaincodeActionPayload chaincodeActionPayload = FabricTransaction.ChaincodeActionPayload.parseFrom(action.getPayload());
				    FabricProposalResponse.ProposalResponsePayload prp = FabricProposalResponse.ProposalResponsePayload.parseFrom(chaincodeActionPayload.getAction().getProposalResponsePayload());
				    FabricProposal.ChaincodeAction ca = FabricProposal.ChaincodeAction.parseFrom(prp.getExtension());
				    Rwset.TxReadWriteSet txrws = Rwset.TxReadWriteSet.parseFrom(ca.getResults());
				    TxReadWriteSetInfo txrwsInfo = new TxReadWriteSetInfo(txrws);
				    KvRwset.KVRWSet kvrwSet = txrwsInfo.getNsRwsetInfo(0).getRwset();
				    KvRwset.KVWrite kvWrite = kvrwSet.getWrites(0);
				    passedOutput = kvWrite.getValue().toStringUtf8();
				    System.out.println(passedOutput);
				    System.out.println("There it is ........");
			      } catch (InvalidProtocolBufferException e) {
			        throw new Exception("Error creating object from ByteString", e);
			      }	
				return passedOutput;
			}
			catch (Exception e){
				System.out.println("Unable to get network/channel and retrieve the transaction data"); 
				throw new javax.ws.rs.ServiceUnavailableException();
			}
		} 
		catch (Exception e2) 
		{
			System.out.println("Unable to find config or wallet - please check the wallet directory and connection json"); 
			throw new javax.ws.rs.ServiceUnavailableException();
		}
	}

}
