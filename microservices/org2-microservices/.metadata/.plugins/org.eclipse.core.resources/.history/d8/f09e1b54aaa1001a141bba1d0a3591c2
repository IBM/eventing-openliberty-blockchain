package sample.hyperledger.blockchain.communication;

import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import java.util.Set;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;
import java.util.stream.Stream;

import javax.annotation.PostConstruct;
import javax.ejb.Singleton;
import javax.ejb.Startup;
import javax.enterprise.context.ApplicationScoped;
import javax.ejb.DependsOn;

import org.hyperledger.fabric.gateway.Contract;
import org.hyperledger.fabric.gateway.Gateway;
import org.hyperledger.fabric.gateway.Network;
import org.hyperledger.fabric.gateway.Transaction;
import org.hyperledger.fabric.gateway.Wallet;
import org.hyperledger.fabric.gateway.spi.CommitListener;
import org.hyperledger.fabric.gateway.spi.PeerDisconnectEvent;
import org.hyperledger.fabric.sdk.BlockEvent;
import org.hyperledger.fabric.sdk.BlockEvent.TransactionEvent;
import org.hyperledger.fabric.sdk.Peer;

import sample.hyperledger.blockchain.model.Car;

//@Singleton
//@Startup
//@DependsOn("")
public class EventListener {
	
	//set this for the location of the wallet directory and the connection json file
	static String pathRoot = "/Users/Shared/FabConnection/";
	
	private static final long EVENT_TIMEOUT_SECONDS = 30;
	private Consumer<BlockEvent> blockListener;
	private final BlockingQueue<BlockEvent> blockEvents = new LinkedBlockingQueue<>();
	
	private final CommitListener stubCommitListener = new CommitListener() {
        @Override
        public void acceptCommit(BlockEvent.TransactionEvent transactionEvent) { }

        @Override
        public void acceptDisconnect(PeerDisconnectEvent disconnectEvent) { }
    };
    
    @PostConstruct
    private void startup()
    {
    	System.out.println("Event Listener started");
    	while(true){
    		getEvent();}
    }
    
    public EventListener(){
    }
    
	public String getEvent() {
		try {
			Path walletPath = Paths.get(pathRoot + "org-2-wallet");
			Wallet wallet = Wallet.createFileSystemWallet(walletPath);
			
			//load a CCP
			//expecting the connect profile json file; export the Connection Profile from the
			//fabric gateway and add to the default server location 
			Path networkConfigPath = Paths.get(pathRoot + "2-Org-Local-Fabric-Org1_connection.json");
			
			Gateway.Builder builder = Gateway.createBuilder();
			
			//expecting wallet directory within the default server location
			//wallet exported from Fabric wallets Org 1
			builder.identity(wallet, "org2Admin").networkConfig(networkConfigPath).discovery(true);
			try (Gateway gateway = builder.connect()) {
				
				//get the network and contract
				Network network = gateway.getNetwork("mychannel");
				
				Contract contract = network.getContract("fabcar");
				
				//Transaction txn = contract.createTransaction("AddCar");
	            blockListener = network.addBlockListener(blockEvents::add);
	            BlockEvent ev = getBlockEvent();
	            System.out.println( "Number of transaction from block event " + ev.getTransactionCount());
	            
	            String txnId = "";
	            
	            for (TransactionEvent te : ev.getTransactionEvents()) {	
	            	txnId = te.getTransactionID();
	            	System.out.println( "Transaction id is  " + txnId);
	            }
	            
	            return txnId;
				//CommitListener result = network.addCommitListener(stubCommitListener, peers, transactionId);
				
				
				//contract.submitTransaction("createCar", aCar.getKey(), aCar.getMake(), aCar.getModel(), aCar.getColour(), aCar.getOwner());
				//return new Car(aCar.getMake(), aCar.getModel(), aCar.getColour(), aCar.getOwner(), aCar.getKey());
			}
			catch (Exception e){
				System.out.println("Unable to get network/contract and execute query"); 
				throw new javax.ws.rs.ServiceUnavailableException();
			}
		} 
		catch (Exception e2) 
		{
			String current;
			try {
				current = new java.io.File( "." ).getCanonicalPath();
				System.out.println("Current working dir: "+current);
			} catch (IOException e) {
				throw new javax.ws.rs.ServiceUnavailableException();
			}
			System.out.println("Unable to find config or wallet - please check the wallet directory and connection json"); 
			throw new javax.ws.rs.ServiceUnavailableException();
		}	
	}
	
	private BlockEvent getBlockEvent() throws InterruptedException {
        BlockEvent event = blockEvents.poll(EVENT_TIMEOUT_SECONDS, TimeUnit.SECONDS);
        return event;
    }
}
