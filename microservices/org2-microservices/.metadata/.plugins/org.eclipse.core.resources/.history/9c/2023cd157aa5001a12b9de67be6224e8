package sample.hyperledger.blockchain.communication;


import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;


import javax.annotation.PostConstruct;
import javax.ejb.Singleton;
import javax.ejb.Startup;

import org.hyperledger.fabric.gateway.Contract;
import org.hyperledger.fabric.gateway.Gateway;
import org.hyperledger.fabric.gateway.Network;
import org.hyperledger.fabric.gateway.Wallet;
import org.hyperledger.fabric.gateway.spi.CommitListener;
import org.hyperledger.fabric.gateway.spi.PeerDisconnectEvent;
import org.hyperledger.fabric.sdk.BlockEvent;
import org.hyperledger.fabric.sdk.BlockEvent.TransactionEvent;

@Singleton
@Startup
public class EventListener {
	
	//set this for the location of the wallet directory and the connection json file
	static String pathRoot = "/Users/Shared/FabConnection/";
	
	private static final long EVENT_TIMEOUT_SECONDS = 5;
	private Consumer<BlockEvent> blockListener;
	private final BlockingQueue<BlockEvent> blockEvents = new LinkedBlockingQueue<>();
	private String lastTxnId = "";
	
	private final CommitListener stubCommitListener = new CommitListener() {
        @Override
        public void acceptCommit(BlockEvent.TransactionEvent transactionEvent) { }

        @Override
        public void acceptDisconnect(PeerDisconnectEvent disconnectEvent) { }
    };
    /*
     * 
  
	
     */
    @PostConstruct
    private void startup()
    {
    	System.out.println("Event Listener started");
    	
    	try {
			Path walletPath = Paths.get(pathRoot + "org-2-wallet");
			Wallet wallet = Wallet.createFileSystemWallet(walletPath);
			
			//load a CCP
			//expecting the connect profile json file; export the Connection Profile from the
			//fabric gateway and add to the default server location 
			Path networkConfigPath = Paths.get(pathRoot + "2-Org-Local-Fabric-Org1_connection.json");
			System.out.println("NetworkConfigPath");
			Gateway.Builder builder = Gateway.createBuilder();
			System.out.println("Gateway built");
			//expecting wallet directory within the default server location
			//wallet exported from Fabric wallets Org 1
			builder.identity(wallet, "org2Admin").networkConfig(networkConfigPath).discovery(true);
			System.out.println("Got identity");
			
			try (Gateway gateway = builder.connect()) {
				
				//get the network and contract
				Network network = gateway.getNetwork("mychannel");
				System.out.println("Network");
				
				Contract contract = network.getContract("fabcar");
				System.out.println("Contract");
				
	            blockListener = network.addBlockListener(blockEvents::add);
	            System.out.println("Blocklistener");
	          
	            while(true){
	            	try {
	            		BlockEvent ev = getBlockEvent();
	            		System.out.println( "Number of transaction from block event " + ev.getTransactionCount());
		            
		            	for (TransactionEvent te : ev.getTransactionEvents()) {	
		            		lastTxnId = te.getTransactionID();
		            		System.out.println( "Transaction id is  " + lastTxnId);
		            		Thread.sleep(4000);
		            	}
		            	blockEvents.clear();
		            	Thread.sleep(4000);
		            	
	            	}
	            	catch (Exception e)
	            	{
	            		//normal timeout will cause this exception if there isn't anything
	            		System.out.println("exception");
	            		Thread.sleep(4000);
	            	}
	            	
				}
				 
			}
			catch (Exception e){
				System.out.println("Unable to get network/contract"); 
				System.out.println(e.getMessage());		
			}
		} 
		catch (Exception e2) 
		{
			System.out.println("Failed to build identity"); 
			System.out.println(e2.getMessage());
		}	
    }
    
    public EventListener(){
    }
    
    /*
	public String getEvent() {
		try {
			Path walletPath = Paths.get(pathRoot + "org-2-wallet");
			Wallet wallet = Wallet.createFileSystemWallet(walletPath);
			
			//load a CCP
			//expecting the connect profile json file; export the Connection Profile from the
			//fabric gateway and add to the default server location 
			Path networkConfigPath = Paths.get(pathRoot + "2-Org-Local-Fabric-Org1_connection.json");
			System.out.println("NetworkConfigPath");
			Gateway.Builder builder = Gateway.createBuilder();
			System.out.println("Gateway built");
			//expecting wallet directory within the default server location
			//wallet exported from Fabric wallets Org 1
			builder.identity(wallet, "org2Admin").networkConfig(networkConfigPath).discovery(true);
			System.out.println("Got identity");
			
			try (Gateway gateway = builder.connect()) {
				
				//get the network and contract
				Network network = gateway.getNetwork("mychannel");
				System.out.println("Network");
				
				Contract contract = network.getContract("fabcar");
				System.out.println("Contract");
				
	            blockListener = network.addBlockListener(blockEvents::add);
	            System.out.println("Blocklistener");
	            
	            BlockEvent ev = getBlockEvent();
	            
	            System.out.println( "Number of transaction from block event " + ev.getTransactionCount());
	            
	            String txnId = "";
	            
	            for (TransactionEvent te : ev.getTransactionEvents()) {	
	            	txnId = te.getTransactionID();
	            	System.out.println( "Transaction id is  " + txnId);
	            }
	            
	            network.removeBlockListener(blockListener);
	            blockEvents.clear();
	            
	            return txnId;
				//CommitListener result = network.addCommitListener(stubCommitListener, peers, transactionId);
				
				
				//contract.submitTransaction("createCar", aCar.getKey(), aCar.getMake(), aCar.getModel(), aCar.getColour(), aCar.getOwner());
				//return new Car(aCar.getMake(), aCar.getModel(), aCar.getColour(), aCar.getOwner(), aCar.getKey());
			}
			catch (Exception e){
				System.out.println("Unable to get network/contract and execute query"); 
				System.out.println(e.getMessage());
				return "Error";
			}
		} 
		catch (Exception e2) 
		{
			System.out.println("Failed to build identity"); 
			System.out.println(e2.getMessage());
			return "Error";
		}	
	}
	*/
	public String getLastTransactionId() {
		return lastTxnId;
	}
	
	private BlockEvent getBlockEvent() throws InterruptedException {
			BlockEvent event =null;
			event = blockEvents.poll(EVENT_TIMEOUT_SECONDS, TimeUnit.SECONDS);		
			return event;
    }
}

